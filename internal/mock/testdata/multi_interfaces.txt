# Tests mockgen with multiple small interfaces.
# golden files are under testdata

mockgen

cmpenv stdout testdata/stdout

cmpenv stderr testdata/stderr

cmp mock_gen.go testdata/mock_gen.go

-- testdata/stdout --
-- testdata/stderr --
mockgen: example.com: wrote $WORK/mock_gen.go
-- cache.go --
package cache

type Putter interface {
	Put(key string, value any) error
}
type Getter interface {
	Get(key string) (value any, ok bool)
}
type Deleter interface {
	Delete(string)
}
type Loader interface {
	Load(...string)
}
-- go.mod --
module example.com

go 1.20
-- mock.go --
//go:build mockstub

package cache

type mockCache struct {
	Putter
	Getter
	Deleter
	Loader
}
-- testdata/mock_gen.go --
// Code generated by mockgen. DO NOT EDIT.

//go:generate go run -mod=mod github.com/Versent/go-mock/cmd/mockgen
//go:build !mockstub
// +build !mockstub

package cache

import (
	mock "github.com/Versent/go-mock"
	testing "testing"
)

var _ Putter = (*mockCache)(nil)

func ExpectPut(delegate func(_ testing.TB, key string, value any) error) func(*mockCache) {
	return mock.Expect[mockCache]("Put", delegate)
}

func ExpectManyPut(delegate func(_ testing.TB, _ mock.CallCount, key string, value any) error) func(*mockCache) {
	return mock.ExpectMany[mockCache]("Put", delegate)
}

func (m *mockCache) Put(key string, value any) error {
	return mock.Call1[error](m, "Put", key, value)
}

var _ Getter = (*mockCache)(nil)

func ExpectGet(delegate func(_ testing.TB, key string) (value any, ok bool)) func(*mockCache) {
	return mock.Expect[mockCache]("Get", delegate)
}

func ExpectManyGet(delegate func(_ testing.TB, _ mock.CallCount, key string) (value any, ok bool)) func(*mockCache) {
	return mock.ExpectMany[mockCache]("Get", delegate)
}

func (m *mockCache) Get(key string) (value any, ok bool) {
	return mock.Call2[any, bool](m, "Get", key)
}

var _ Deleter = (*mockCache)(nil)

func ExpectDelete(delegate func(_ testing.TB, v0 string)) func(*mockCache) {
	return mock.Expect[mockCache]("Delete", delegate)
}

func ExpectManyDelete(delegate func(_ testing.TB, _ mock.CallCount, v0 string)) func(*mockCache) {
	return mock.ExpectMany[mockCache]("Delete", delegate)
}

func (m *mockCache) Delete(v0 string) {
	mock.Call0(m, "Delete", v0)
}

var _ Loader = (*mockCache)(nil)

func ExpectLoad(delegate func(_ testing.TB, v0 []string)) func(*mockCache) {
	return mock.Expect[mockCache]("Load", delegate)
}

func ExpectManyLoad(delegate func(_ testing.TB, _ mock.CallCount, v0 []string)) func(*mockCache) {
	return mock.ExpectMany[mockCache]("Load", delegate)
}

func (m *mockCache) Load(v0 ...string) {
	mock.Call0(m, "Load", v0)
}

type mockCache struct {
	_ byte // prevent zero-size struct
}
